@page "/headquarters"
@inject IMemoryCache MemoryCache
@inject IJSRuntime JSRuntime;
@inject RateLimitedQueueManager QueueManager
@inject SpaceTradersClient SpaceTradersClient
@inject LocationService Location

<PageTitle>Location lookup</PageTitle>

@using SpaceTraders.Models
@using SpaceTradersApp.Data
@using System.Text.Json
@using Microsoft.Extensions.Caching.Memory

<h1>Headquarters</h1>

@if (system == null)
{
    <p><em>Scanning...</em></p>
}
else
{
    <canvas width="1000" height="1000" @ref="canvasRef"
            @onmousedown="StartDrag" @onmouseup="EndDrag"
            @onmousemove="OnDrag" @onmousewheel="OnMouseWheel"
            style="border: 1px solid white; cursor: grab; background-color: black;">
    </canvas>
}

@code {

    private double scaleFactor = 1;
    private int svgWidth = 1000;
    private int svgHeight = 1000;
    private int centerX = 500;
    private int centerY = 500;

    private bool isDragging = false;
    private double startDragX = 0;
    private double startDragY = 0;
    private double translationX = 0;
    private double translationY = 0;

    private void ZoomIn()
    {
        scaleFactor *= 1.1;
        StateHasChanged();
    }

    private void ZoomOut()
    {
        scaleFactor *= 0.9;
        StateHasChanged();
    }

    private System.Threading.Timer _timer;
    private SpaceTraders.Models.Agent AgentData;
    private LocalSystem? system;

    protected override async Task OnInitializedAsync()
    {
        _timer = new System.Threading.Timer(_ => InvokeAsync(StateHasChanged), null, 0, 10000);

        AgentData = await MemoryCache.GetOrCreateAsync("AgentData", async entry =>
        {
            entry.AbsoluteExpirationRelativeToNow = TimeSpan.FromMinutes(1);
            return await SpaceTradersClient.GetAgentAsync();
        });

        string sector = AgentData.Headquarters.Split('-')[0] + '-' + AgentData.Headquarters.Split('-')[1];
        system = await Location.GetSystemAsync(sector);
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }

    private void StartDrag(MouseEventArgs e)
    {
        isDragging = true;
        startDragX = e.ClientX - translationX;
        startDragY = e.ClientY - translationY;
    }

    private void OnDrag(MouseEventArgs e)
    {
        if (isDragging)
        {
            translationX = e.ClientX - startDragX;
            translationY = e.ClientY - startDragY;
            StateHasChanged();
        }
    }

    private void EndDrag(MouseEventArgs e)
    {
        isDragging = false;
    }

    private void OnMouseWheel(WheelEventArgs e)
    {
        if (e.DeltaY > 0)
        {
            ZoomOut();
        }
        else
        {
            ZoomIn();
        }
    }



    protected override Task OnParametersSetAsync()
    {
        return base.OnParametersSetAsync();
    }

    private ElementReference canvasRef;



    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            string sector = AgentData.Headquarters.Split('-')[0] + '-' + AgentData.Headquarters.Split('-')[1];
            system = await Location.GetSystemAsync(sector);
            system.Waypoints.Add(new Waypoint
                {
                    X = 0,
                    Y = 0,
                    Symbol = system.Symbol,
                    Type = system.Type
                });
        }
        if (system != null)
        {
            await JSRuntime.InvokeVoidAsync("drawWaypoints", canvasRef, system.Waypoints, scaleFactor, translationX, translationY);
        }
    }
}
